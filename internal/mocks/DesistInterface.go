// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/ianhecker/eth-gas-watcher/internal/desist"
	mock "github.com/stretchr/testify/mock"
)

// NewMockDesistInterface creates a new instance of MockDesistInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDesistInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDesistInterface {
	mock := &MockDesistInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDesistInterface is an autogenerated mock type for the DesistInterface type
type MockDesistInterface struct {
	mock.Mock
}

type MockDesistInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDesistInterface) EXPECT() *MockDesistInterface_Expecter {
	return &MockDesistInterface_Expecter{mock: &_m.Mock}
}

// Error provides a mock function for the type MockDesistInterface
func (_mock *MockDesistInterface) Error() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDesistInterface_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockDesistInterface_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *MockDesistInterface_Expecter) Error() *MockDesistInterface_Error_Call {
	return &MockDesistInterface_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *MockDesistInterface_Error_Call) Run(run func()) *MockDesistInterface_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDesistInterface_Error_Call) Return(err error) *MockDesistInterface_Error_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDesistInterface_Error_Call) RunAndReturn(run func() error) *MockDesistInterface_Error_Call {
	_c.Call.Return(run)
	return _c
}

// FatalOnError provides a mock function for the type MockDesistInterface
func (_mock *MockDesistInterface) FatalOnError(message string) {
	_mock.Called(message)
	return
}

// MockDesistInterface_FatalOnError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FatalOnError'
type MockDesistInterface_FatalOnError_Call struct {
	*mock.Call
}

// FatalOnError is a helper method to define mock.On call
//   - message
func (_e *MockDesistInterface_Expecter) FatalOnError(message interface{}) *MockDesistInterface_FatalOnError_Call {
	return &MockDesistInterface_FatalOnError_Call{Call: _e.mock.On("FatalOnError", message)}
}

func (_c *MockDesistInterface_FatalOnError_Call) Run(run func(message string)) *MockDesistInterface_FatalOnError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDesistInterface_FatalOnError_Call) Return() *MockDesistInterface_FatalOnError_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDesistInterface_FatalOnError_Call) RunAndReturn(run func(message string)) *MockDesistInterface_FatalOnError_Call {
	_c.Run(run)
	return _c
}

// Flush provides a mock function for the type MockDesistInterface
func (_mock *MockDesistInterface) Flush() desist.DesistInterface {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 desist.DesistInterface
	if returnFunc, ok := ret.Get(0).(func() desist.DesistInterface); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(desist.DesistInterface)
		}
	}
	return r0
}

// MockDesistInterface_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type MockDesistInterface_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
func (_e *MockDesistInterface_Expecter) Flush() *MockDesistInterface_Flush_Call {
	return &MockDesistInterface_Flush_Call{Call: _e.mock.On("Flush")}
}

func (_c *MockDesistInterface_Flush_Call) Run(run func()) *MockDesistInterface_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDesistInterface_Flush_Call) Return(desistInterface desist.DesistInterface) *MockDesistInterface_Flush_Call {
	_c.Call.Return(desistInterface)
	return _c
}

func (_c *MockDesistInterface_Flush_Call) RunAndReturn(run func() desist.DesistInterface) *MockDesistInterface_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// WithError provides a mock function for the type MockDesistInterface
func (_mock *MockDesistInterface) WithError(err error) desist.DesistInterface {
	ret := _mock.Called(err)

	if len(ret) == 0 {
		panic("no return value specified for WithError")
	}

	var r0 desist.DesistInterface
	if returnFunc, ok := ret.Get(0).(func(error) desist.DesistInterface); ok {
		r0 = returnFunc(err)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(desist.DesistInterface)
		}
	}
	return r0
}

// MockDesistInterface_WithError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithError'
type MockDesistInterface_WithError_Call struct {
	*mock.Call
}

// WithError is a helper method to define mock.On call
//   - err
func (_e *MockDesistInterface_Expecter) WithError(err interface{}) *MockDesistInterface_WithError_Call {
	return &MockDesistInterface_WithError_Call{Call: _e.mock.On("WithError", err)}
}

func (_c *MockDesistInterface_WithError_Call) Run(run func(err error)) *MockDesistInterface_WithError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockDesistInterface_WithError_Call) Return(desistInterface desist.DesistInterface) *MockDesistInterface_WithError_Call {
	_c.Call.Return(desistInterface)
	return _c
}

func (_c *MockDesistInterface_WithError_Call) RunAndReturn(run func(err error) desist.DesistInterface) *MockDesistInterface_WithError_Call {
	_c.Call.Return(run)
	return _c
}
