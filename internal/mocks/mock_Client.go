// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"net/http"

	"github.com/ianhecker/eth-gas-watcher/internal/endpoint/payload"
	mock "github.com/stretchr/testify/mock"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// GetWithPayload provides a mock function for the type MockClient
func (_mock *MockClient) GetWithPayload(payload1 payload.Payload) ([]byte, error) {
	ret := _mock.Called(payload1)

	if len(ret) == 0 {
		panic("no return value specified for GetWithPayload")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(payload.Payload) ([]byte, error)); ok {
		return returnFunc(payload1)
	}
	if returnFunc, ok := ret.Get(0).(func(payload.Payload) []byte); ok {
		r0 = returnFunc(payload1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(payload.Payload) error); ok {
		r1 = returnFunc(payload1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetWithPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithPayload'
type MockClient_GetWithPayload_Call struct {
	*mock.Call
}

// GetWithPayload is a helper method to define mock.On call
//   - payload1
func (_e *MockClient_Expecter) GetWithPayload(payload1 interface{}) *MockClient_GetWithPayload_Call {
	return &MockClient_GetWithPayload_Call{Call: _e.mock.On("GetWithPayload", payload1)}
}

func (_c *MockClient_GetWithPayload_Call) Run(run func(payload1 payload.Payload)) *MockClient_GetWithPayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(payload.Payload))
	})
	return _c
}

func (_c *MockClient_GetWithPayload_Call) Return(bytes []byte, err error) *MockClient_GetWithPayload_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockClient_GetWithPayload_Call) RunAndReturn(run func(payload1 payload.Payload) ([]byte, error)) *MockClient_GetWithPayload_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithRequest provides a mock function for the type MockClient
func (_mock *MockClient) GetWithRequest(request http.Request) ([]byte, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for GetWithRequest")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(http.Request) ([]byte, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(http.Request) []byte); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(http.Request) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetWithRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithRequest'
type MockClient_GetWithRequest_Call struct {
	*mock.Call
}

// GetWithRequest is a helper method to define mock.On call
//   - request
func (_e *MockClient_Expecter) GetWithRequest(request interface{}) *MockClient_GetWithRequest_Call {
	return &MockClient_GetWithRequest_Call{Call: _e.mock.On("GetWithRequest", request)}
}

func (_c *MockClient_GetWithRequest_Call) Run(run func(request http.Request)) *MockClient_GetWithRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.Request))
	})
	return _c
}

func (_c *MockClient_GetWithRequest_Call) Return(bytes []byte, err error) *MockClient_GetWithRequest_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockClient_GetWithRequest_Call) RunAndReturn(run func(request http.Request) ([]byte, error)) *MockClient_GetWithRequest_Call {
	_c.Call.Return(run)
	return _c
}
