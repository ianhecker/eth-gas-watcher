// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"net/http"

	"github.com/ianhecker/eth-gas-watcher/internal/endpoint/payload"
	mock "github.com/stretchr/testify/mock"
)

// NewMockClientInterface creates a new instance of MockClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientInterface {
	mock := &MockClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClientInterface is an autogenerated mock type for the ClientInterface type
type MockClientInterface struct {
	mock.Mock
}

type MockClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientInterface) EXPECT() *MockClientInterface_Expecter {
	return &MockClientInterface_Expecter{mock: &_m.Mock}
}

// GetWithRequest provides a mock function for the type MockClientInterface
func (_mock *MockClientInterface) GetWithRequest(request *http.Request) ([]byte, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for GetWithRequest")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*http.Request) ([]byte, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(*http.Request) []byte); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientInterface_GetWithRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithRequest'
type MockClientInterface_GetWithRequest_Call struct {
	*mock.Call
}

// GetWithRequest is a helper method to define mock.On call
//   - request
func (_e *MockClientInterface_Expecter) GetWithRequest(request interface{}) *MockClientInterface_GetWithRequest_Call {
	return &MockClientInterface_GetWithRequest_Call{Call: _e.mock.On("GetWithRequest", request)}
}

func (_c *MockClientInterface_GetWithRequest_Call) Run(run func(request *http.Request)) *MockClientInterface_GetWithRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MockClientInterface_GetWithRequest_Call) Return(bytes []byte, err error) *MockClientInterface_GetWithRequest_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockClientInterface_GetWithRequest_Call) RunAndReturn(run func(request *http.Request) ([]byte, error)) *MockClientInterface_GetWithRequest_Call {
	_c.Call.Return(run)
	return _c
}

// MakeRequestWithPayload provides a mock function for the type MockClientInterface
func (_mock *MockClientInterface) MakeRequestWithPayload(method string, payload1 payload.Payload) (*http.Request, error) {
	ret := _mock.Called(method, payload1)

	if len(ret) == 0 {
		panic("no return value specified for MakeRequestWithPayload")
	}

	var r0 *http.Request
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, payload.Payload) (*http.Request, error)); ok {
		return returnFunc(method, payload1)
	}
	if returnFunc, ok := ret.Get(0).(func(string, payload.Payload) *http.Request); ok {
		r0 = returnFunc(method, payload1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, payload.Payload) error); ok {
		r1 = returnFunc(method, payload1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClientInterface_MakeRequestWithPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeRequestWithPayload'
type MockClientInterface_MakeRequestWithPayload_Call struct {
	*mock.Call
}

// MakeRequestWithPayload is a helper method to define mock.On call
//   - method
//   - payload1
func (_e *MockClientInterface_Expecter) MakeRequestWithPayload(method interface{}, payload1 interface{}) *MockClientInterface_MakeRequestWithPayload_Call {
	return &MockClientInterface_MakeRequestWithPayload_Call{Call: _e.mock.On("MakeRequestWithPayload", method, payload1)}
}

func (_c *MockClientInterface_MakeRequestWithPayload_Call) Run(run func(method string, payload1 payload.Payload)) *MockClientInterface_MakeRequestWithPayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(payload.Payload))
	})
	return _c
}

func (_c *MockClientInterface_MakeRequestWithPayload_Call) Return(request *http.Request, err error) *MockClientInterface_MakeRequestWithPayload_Call {
	_c.Call.Return(request, err)
	return _c
}

func (_c *MockClientInterface_MakeRequestWithPayload_Call) RunAndReturn(run func(method string, payload1 payload.Payload) (*http.Request, error)) *MockClientInterface_MakeRequestWithPayload_Call {
	_c.Call.Return(run)
	return _c
}
