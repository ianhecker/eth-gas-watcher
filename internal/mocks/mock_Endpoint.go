// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/ianhecker/eth-gas-watcher/internal/endpoint/feehistory"
	mock "github.com/stretchr/testify/mock"
)

// NewMockEndpoint creates a new instance of MockEndpoint. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEndpoint(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEndpoint {
	mock := &MockEndpoint{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEndpoint is an autogenerated mock type for the Endpoint type
type MockEndpoint struct {
	mock.Mock
}

type MockEndpoint_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEndpoint) EXPECT() *MockEndpoint_Expecter {
	return &MockEndpoint_Expecter{mock: &_m.Mock}
}

// GetFeeHistory provides a mock function for the type MockEndpoint
func (_mock *MockEndpoint) GetFeeHistory() (feehistory.Result, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFeeHistory")
	}

	var r0 feehistory.Result
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (feehistory.Result, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() feehistory.Result); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(feehistory.Result)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEndpoint_GetFeeHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeeHistory'
type MockEndpoint_GetFeeHistory_Call struct {
	*mock.Call
}

// GetFeeHistory is a helper method to define mock.On call
func (_e *MockEndpoint_Expecter) GetFeeHistory() *MockEndpoint_GetFeeHistory_Call {
	return &MockEndpoint_GetFeeHistory_Call{Call: _e.mock.On("GetFeeHistory")}
}

func (_c *MockEndpoint_GetFeeHistory_Call) Run(run func()) *MockEndpoint_GetFeeHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEndpoint_GetFeeHistory_Call) Return(result feehistory.Result, err error) *MockEndpoint_GetFeeHistory_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockEndpoint_GetFeeHistory_Call) RunAndReturn(run func() (feehistory.Result, error)) *MockEndpoint_GetFeeHistory_Call {
	_c.Call.Return(run)
	return _c
}
